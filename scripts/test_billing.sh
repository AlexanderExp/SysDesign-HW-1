#!/usr/bin/env bash
# scripts/test_billing.sh
set -Eeuo pipefail

# -------------------- –ü–ê–†–ê–ú–ï–¢–†–´ --------------------
# –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
BASE=${BASE:-http://localhost:8000}

DB_SVC=${DB_SVC:-db}
DB_NAME=${DB_NAME:-rental}
DB_USER=${DB_USER:-app}

# –ø–µ—Ä–∏–æ–¥ —Ç–∏–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ (–ù–£–ñ–ï–ù –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–µ; —Å–∞–º –≤–æ—Ä–∫–µ—Ä –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ .env/docker-compose)
TICK=${BILLING_TICK_SEC:-30}
# –∂–¥—ë–º —Å –∑–∞–ø–∞—Å–æ–º 3 —Ç–∏–∫–∞
WAIT=$(( TICK*3 + 3 ))

# ¬´—É—Å–∫–æ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏¬ª: –Ω–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –æ—Ç–º–æ—Ç–∞—Ç—å started_at –Ω–∞–∑–∞–¥
FF_MINUTES=${FF_MINUTES:-0}

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ACTIVE)
FORCE_STATUS=${FORCE_STATUS:-}

# –ï—Å–ª–∏ –≤–∫–ª—é—á–∏—Ç—å, —Å–∫—Ä–∏–ø—Ç –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è —Å–∞–º –ø–æ–¥–Ω—è—Ç—å billing-worker (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
ENSURE_WORKER=${ENSURE_WORKER:-1}

# -------------------- –£–¢–ò–õ–ò–¢–´ --------------------
banner() { echo; echo "== $* =="; }

json_get() { python3 -c '
import sys, json
path = sys.argv[1]
obj = json.load(sys.stdin)
for k in path.split("."):
    obj = obj[k]
print(obj)
' "$1"; }

sql() { docker compose exec -T "$DB_SVC" psql -U "$DB_USER" -d "$DB_NAME" -Atc "$1"; }

assert() {
  if ! eval "$1"; then
    echo "‚ùå  $2"
    exit 1
  else
    echo "‚úÖ  $2"
  fi
}

on_fail_dump() {
  echo
  echo "---- diagnostics (last 60s worker logs) ----"
  docker compose logs --since=60s billing-worker || true
  echo "-------------------------------------------"
}
trap on_fail_dump ERR

ensure_worker() {
  if [[ "$ENSURE_WORKER" != "1" ]]; then
    return 0
  fi
  # –∑–∞–ø—É—â–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä?
  if ! docker compose ps --status running billing-worker >/dev/null 2>&1; then
    echo "(ensure) –∑–∞–ø—É—Å–∫–∞—é billing-worker‚Ä¶"
    docker compose up -d billing-worker
    sleep 2
  fi
  # –ø–æ–∫–∞–∂–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ –ø—Ä–æ —Ç–∏–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  local tl
  tl=$(docker compose logs --since 5s billing-worker 2>/dev/null | grep -E "\[billing-worker\] tick=" | tail -1 || true)
  if [[ -n "$tl" ]]; then
    echo "(ensure) $tl"
  else
    echo "(ensure) –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–∏–∫ –≤–æ—Ä–∫–µ—Ä–∞ –∏–∑ –ª–æ–≥–æ–≤ (–Ω–æ—Ä–º–∞–ª—å–Ω–æ). TEST_TICK=${TICK}s"
  fi
}

# -------------------- –°–¢–ê–†–¢ --------------------
ensure_worker

banner "health"
code=$(curl -s -o /dev/null -w '%{http_code}' "$BASE/health")
assert "[[ $code -eq 200 ]]" "rental-core –∂–∏–≤ ($code)"

banner "quote"
QUOTE_JSON=$(
  curl -s -X POST "$BASE/rentals/quote" \
    -H 'Content-Type: application/json' \
    -d '{"station_id":"some-station-id","user_id":"u1"}'
)
echo "$QUOTE_JSON" | python3 -m json.tool

Q=$(echo "$QUOTE_JSON" | json_get quote_id)
assert "[[ -n \"$Q\" ]]" "–ø–æ–ª—É—á–∏–ª–∏ quote_id"

IDEMP=$(uuidgen 2>/dev/null || python3 -c 'import uuid; print(uuid.uuid4())')
echo "Idempotency-Key: $IDEMP"

banner "start (idempotent)"
START_JSON=$(
  curl -s -X POST "$BASE/rentals/start" \
    -H 'Content-Type: application/json' \
    -H "Idempotency-Key: $IDEMP" \
    -d "{\"quote_id\":\"$Q\"}"
)
echo "$START_JSON" | python3 -m json.tool

OID=$(echo "$START_JSON" | json_get order_id)
STATUS=$(echo "$START_JSON" | json_get status)

assert "[[ -n \"$OID\" ]]" "–ø–æ–ª—É—á–∏–ª–∏ order_id"
assert "[[ \"$STATUS\" == active ]]" "–∞—Ä–µ–Ω–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞"

# -------------------- –î–û–ü. –ú–û–î–ò–§–ò–ö–ê–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ê --------------------
if [[ "$FF_MINUTES" -gt 0 ]]; then
  banner "fast-forward started_at –Ω–∞ ${FF_MINUTES} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥"
  sql "update rentals set started_at = now() - interval '${FF_MINUTES} minutes' where id='${OID}';"
fi

if [[ -n "$FORCE_STATUS" ]]; then
  banner "override status='${FORCE_STATUS}'"
  sql "update rentals set status='${FORCE_STATUS}' where id='${OID}';"
fi

banner "–∂–¥—ë–º ~${WAIT} —Å–µ–∫ (tick=${TICK})"
sleep "$WAIT"

# -------------------- –ü–†–û–í–ï–†–ö–ê –°–ü–ò–°–ê–ù–ò–ô --------------------
banner "–ø–µ—Ä–≤–∏—á–Ω—ã–µ —Å–ø–∏—Å–∞–Ω–∏—è"
PA_CNT=$(sql "select count(*) from payment_attempts where rental_id='${OID}';")
PA_OK=$(sql "select coalesce(sum(case when success then 1 else 0 end),0) from payment_attempts where rental_id='${OID}';")
PA_SUM=$(sql "select coalesce(sum(amount),0) from payment_attempts where rental_id='${OID}';")
DEBT=$(sql "select coalesce((select amount_total from debts where rental_id='${OID}'),0);")

echo "attempts_total=$PA_CNT, attempts_ok=$PA_OK, amount_sum=$PA_SUM, debt=$DEBT"
assert "[[ $PA_CNT -ge 1 ]]" "–≤–æ—Ä–∫–µ—Ä —Å–¥–µ–ª–∞–ª >=1 –ø–æ–ø—ã—Ç–∫–∏ —Å–ø–∏—Å–∞–Ω–∏—è"

# —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–Ω–∏–º–æ–∫ —Å—Ç–∞—Ç—É—Å–∞
banner "status"
curl -s "$BASE/rentals/$OID/status" | python3 -m json.tool

echo
echo "üéâ TEST PASS"
